//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.21006.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AmazedSaint.Elastic.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("AmazedSaint.Elastic.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to @table ?(root&gt;&quot;Table&quot;)
        ///public class #(table.Type.Name) 
        ///{@col?(table.Type)
        ///		 
        ///	 private #(col.Type) _#(col.Name);
        ///	 public #(col.Type) #(col.Name)
        ///	 {
        ///		 get { return _#(col.Name); }
        ///		 set {_#(col.Name)=value;}
        ///	 }
        ///@col end
        ///}
        ///@table end.
        /// </summary>
        internal static string Content {
            get {
                return ResourceManager.GetString("Content", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;#+
        ///public dynamic GetRoot ()
        ///{
        ///  var doc = XDocument.Load(&quot;~~&quot;);
        ///  dynamic root = AmazedSaint.Elastic.DynamicExtensions.ElasticFromXElement(doc.Root);
        ///  return root;
        ///}
        ///#&gt;
        ///
        ///&lt;#+
        ///public dynamic root
        ///{
        ///  get {return GetRoot(); }
        ///}
        ///#&gt;.
        /// </summary>
        internal static string Footer {
            get {
                return ResourceManager.GetString("Footer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;#@ template caching=&quot;false&quot; debug=&quot;false&quot; hostspecific=&quot;true&quot; language=&quot;C#&quot; #&gt;
        ///&lt;#@ Assembly Name=&quot;System.Core, Version=4.0.0.0, Culture=neutral&quot; #&gt;
        ///&lt;#@ Assembly Name=&quot;System.Xml.Linq, Version=4.0.0.0, Culture=neutral&quot; #&gt;
        ///&lt;#@ Assembly Name=&quot;System.Xml, Version=4.0.0.0, Culture=neutral&quot; #&gt;
        ///&lt;#@ Assembly Name=&quot;Microsoft.CSharp, Version=4.0.0.0, Culture=neutral&quot; #&gt;
        ///&lt;#@ Assembly Name=&quot;System.Dynamic, Version=4.0.0.0, Culture=neutral&quot; #&gt;
        ///&lt;#@ Assembly name=&quot;AmazedSaint.Elastic.dll&quot; #&gt;
        ///&lt;#@ Import namespace=&quot; [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Header {
            get {
                return ResourceManager.GetString("Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
        ///&lt;Database Name=&quot;NORTHWND&quot; Class=&quot;NorthwindDataContext&quot; xmlns=&quot;http://schemas.microsoft.com/linqtosql/dbml/2007&quot;&gt;
        ///  &lt;Connection Mode=&quot;AppSettings&quot; ConnectionString=&quot;Data Source=.\SQLEXPRESS;AttachDbFilename=|DataDirectory|\NORTHWND.MDF;Integrated Security=True;User Instance=True&quot; SettingsObjectName=&quot;TestHarness.Properties.Settings&quot; SettingsPropertyName=&quot;NORTHWNDConnectionString&quot; Provider=&quot;System.Data.SqlClient&quot; /&gt;
        ///  &lt;Table Name=&quot;dbo.Customers&quot; Member=&quot;Customers&quot;&gt;
        ///   [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Model {
            get {
                return ResourceManager.GetString("Model", resourceCulture);
            }
        }
    }
}
